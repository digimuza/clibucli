declare type DefinitelyString<T> = Extract<T, string> extends never ? string : Extract<T, string> extends any ? string : Extract<T, string>;
export declare function isString<T>(data: T): data is DefinitelyString<T>;
declare type DefinitelyNumber<T> = Extract<T, number> extends never ? number : Extract<T, number> extends any ? number : Extract<T, number>;
export declare function isNumber<T>(data: T): data is DefinitelyNumber<T>;
export declare function isDefined<T>(data: T): data is NonNullable<T>;
declare type DefinitelyBoolean<T> = Extract<T, boolean> extends never ? boolean : Extract<T, boolean> extends any ? boolean : Extract<T, number>;
export declare function isBoolean<T>(data: T): data is DefinitelyBoolean<T>;
declare type DefinitelyPromise<T extends unknown> = Extract<T, Promise<any>> extends never ? Promise<unknown> : Extract<T, Promise<any>>;
export declare function isPromise<T>(data: T): data is DefinitelyPromise<T>;
declare type DefinitelyArray<T extends unknown> = Extract<T, Array<any> | ReadonlyArray<any>> extends never ? ReadonlyArray<unknown> : Extract<T, Array<any> | ReadonlyArray<any>>;
export declare function isArray<T extends unknown>(data: T): data is DefinitelyArray<T>;
declare type DefinitelyObject<T extends unknown> = Exclude<Extract<T, object>, Array<any> | Function> extends never ? {
    [k: string]: unknown;
} : Exclude<Extract<T, object>, Array<any> | Function>;
export declare function isObject<T extends unknown>(data: T): data is DefinitelyObject<T>;
declare type DefinitelyFunction<T> = Extract<T, Function> extends never ? Function : Extract<T, Function>;
export declare function isFunction<T>(data: T): data is DefinitelyFunction<T>;
export declare function isNil<T>(data: T): data is Extract<T, null | undefined>;
declare type DefinitelyError<T> = Extract<T, Error> extends never ? Error : Extract<T, Error>;
export declare function isError<T>(data: T): data is DefinitelyError<T>;
declare type DefinitelyDate<T> = Extract<T, Date> extends never ? Date : Extract<T, Date>;
export declare function isDate<T>(data: T): data is DefinitelyDate<T>;
export declare function isTruthy<T>(value: T): value is Exclude<T, null | undefined | false | '' | 0>;
export declare function isNot<T, S>(predicate: (data: T) => data is S): (data: T) => data is Exclude<T, S>;
export declare function isNot<T>(predicate: (data: T) => any): (data: T) => boolean;
export {};
//# sourceMappingURL=guards.d.ts.map