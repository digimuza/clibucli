import { type } from "./type";
import { isFunction, isPromise, isArray, isObject } from "./index";
/**
 * Compares two values recursively.
 * @description
 * The function has two modes `soft` and `hard` soft mode ignores array order hard mode preserves array order
 * @param valueA - anything
 * @param valueB - anything
 * @param mode - array comparison mode
 */
export function deepEqual(valueA, valueB, mode) {
    if (mode === void 0) { mode = 'soft'; }
    var compare = function (a, b) {
        if (a === b)
            return true;
        if (type(a) !== type(b))
            return false;
        if (isFunction(a) && isFunction(b))
            a.toString() === b.toString();
        if (isPromise(a) && isPromise(b))
            return a === b;
        if (isArray(a) && isArray(b)) {
            if (a.length !== b.length)
                return false;
            var aArray = mode === 'hard' ? a : a;
            var bArray = mode === 'hard' ? b : b;
            for (var index in aArray) {
                if (!deepEqual(aArray[index], bArray[index]))
                    return false;
            }
            return true;
        }
        if (isObject(a) && isObject(b)) {
            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b);
            if (aKeys.length !== bKeys.length)
                return false;
            if (!deepEqual(aKeys, bKeys))
                return false;
            for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {
                var aKey = aKeys_1[_i];
                if (!deepEqual(a[aKey], b[aKey]))
                    return false;
            }
            return true;
        }
        return false;
    };
    return compare(valueA, valueB);
}
